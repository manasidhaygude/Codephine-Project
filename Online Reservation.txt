import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

class ReservationSystem {
    private static Map<String, Reservation> reservations = new HashMap<>();
    private static int reservationCounter = 1;

    static class Reservation {
        String pnr;
        String trainNumber;
        String userName;
        String classType;
        String date;
        String source;
        String destination;

        Reservation(String trainNumber, String userName, String classType, String date, String source, String destination) {
            this.pnr = "PNR" + reservationCounter++;
            this.trainNumber = trainNumber;
            this.userName = userName;
            this.classType = classType;
            this.date = date;
            this.source = source;
            this.destination = destination;
        }

        @Override
        public String toString() {
            return "PNR: " + pnr +
                    ", Train Number: " + trainNumber +
                    ", User: " + userName +
                    ", Class: " + classType +
                    ", Date: " + date +
                    ", Source: " + source +
                    ", Destination: " + destination;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Make a Reservation");
            System.out.println("2. Cancel a Reservation");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume the newline character

            switch (choice) {
                case 1:
                    makeReservation(scanner);
                    break;
                case 2:
                    cancelReservation(scanner);
                    break;
                case 3:
                    System.out.println("Exiting the Reservation System. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please choose a valid option.");
            }
        }
    }

    private static void makeReservation(Scanner scanner) {
        System.out.print("Enter Train Number: ");
        String trainNumber = scanner.nextLine();

        System.out.print("Enter User Name: ");
        String userName = scanner.nextLine();

        System.out.print("Enter Class Type: ");
        String classType = scanner.nextLine();

        System.out.print("Enter Date of Journey: ");
        String date = scanner.nextLine();

        System.out.print("Enter Source: ");
        String source = scanner.nextLine();

        System.out.print("Enter Destination: ");
        String destination = scanner.nextLine();

        Reservation reservation = new Reservation(trainNumber, userName, classType, date, source, destination);
        reservations.put(reservation.pnr, reservation);

        System.out.println("Reservation successful!");
        System.out.println("Your PNR is: " + reservation.pnr);
        System.out.println("Details: " + reservation);
    }

    private static void cancelReservation(Scanner scanner) {
        System.out.print("Enter PNR to cancel reservation: ");
        String pnr = scanner.nextLine();

        Reservation reservation = reservations.get(pnr);

        if (reservation != null) {
            System.out.println("Reservation found:");
            System.out.println(reservation);
            System.out.print("Do you want to cancel this reservation? (y/n): ");
            String choice = scanner.nextLine();
            if (choice.equalsIgnoreCase("y")) {
                reservations.remove(pnr);
                System.out.println("Reservation canceled successfully.");
            } else {
                System.out.println("Reservation not canceled.");
            }
        } else {
            System.out.println("No reservation found with PNR: " + pnr);
        }
    }
}
